signals:
  beatA:
    type: beat
    defaultValue: 1
    input: 85
mappings:
  knob1:
    targets:
      - layers.zero.parameters.knob1.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.knob1'
  knob2:
    targets:
      - layers.zero.parameters.knob2.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.knob2'
  knob3:
    targets:
      - layers.zero.parameters.knob3.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.knob3'
  knob4:
    targets:
      - layers.zero.parameters.knob4.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.knob4'
  slider1:
    targets:
      - layers.zero.parameters.slider1.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.slider1'
  slider2:
    targets:
      - layers.zero.parameters.slider2.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.slider2'
  slider3:
    targets:
      - layers.zero.parameters.slider3.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.slider3'
  slider4:
    targets:
      - layers.zero.parameters.slider4.value
    transformFunction: 'return val.toString();'
    source: 'midi:nk2.slider4'
  beatResult:
    targets:
      - layers.zero.opacity
    transformFunction: 'return val;'
    source: signals.beatA.result
  beatResultNeg:
    targets:
      - layers.zeropaperLogo.opacity
    transformFunction: 'return 100 - val;'
    source: signals.beatA.result
  beatnumContructionPath:
    targets:
      - layers.bgk.src
      - layers.bgk2.src
    transformFunction: >-
      return './assets/construction-work/'+ ((val % 3) + 1)
      +'/front.png';
    source: signals.beatA.beatnum
layers:
  bgk:
    type: img
    active: true
    opacity: 100
    zIndex: 100
    layerStyles: >-
      filter: grayscale(1);transform: scale(calc(var(--vol4) * 0.01))
      rotate(calc(0.05deg * var(--frametime)));
    parameters:
      - name: src
        type: string
        value: ./assets/construction-work/1/front.png
  bgk2:
    type: img
    layerStyles: >-
      filter: grayscale(1);transform: scale(calc(var(--vol4) * 0.01))
      rotateX(180deg) rotateY(180deg) rotate(calc(-0.05deg * var(--frametime)));
    parameters:
      - name: src
        type: string
        value: ./assets/construction-work/1/front.png
  zero:
    type: threejs
    layerStyles: ''
    currentCamera: defaultperspective
    setupFunction: |
      function makeClones(object, count = 1) {
        for (var c = 1; c <= count; c++) {
          var clone = object.clone();
          clone.traverse(function(child) {
            if (!child.material) return;
            child.material = child.material.clone();
            // child.material.wireframe = true; // provokes illegal operation \uD83D\uDE22
          });
          clone.name = 'clone' + c;
          scene.add(clone);
        }
      }

      loaderObject('fat', function(fatObject) {
        if (!fatObject) return;

        fatObject.traverse(function(child) {
          if (!child.material) return;
          child.material.wireframe = true;
          child.material.side = THREE.DoubleSide;
        });

        makeClones(fatObject, 8);

        ready();
      });

    updateFunction: |
      var scale = frq(12) * 0.1;
      var tilt = vol(4) - 127;
      var speed = 1000;
      var dist = 200;
      var deg = (frametime % (speed * 360)) / speed;
      var k1 = param('knob1', 2);
      var k2 = param('knob2', 2);
      var k3 = param('knob3', 2);
      var s1 = param('slider1', 50);
      var s2 = param('slider2', 50);
      var s3 = param('slider3', 50);

      camera.position.set(Math.cos(deg) * dist, 15, Math.sin(deg) * dist);
      camera.lookAt(scene.position);

      var fat = scene.getObjectByName('fat');
      if (!fat) return;
      fat.scale.set(scale + 1, scale + 1, scale + 1);
      fat.rotation.set(Math.PI * 0.35, utils.midi2Rad(k1), utils.midi2Rad(k2));

      function alterMaterials(c) {
        return function(child) {
          if (child.material && child.material.color) {
            child.material.wireframe = true;
            child.material.color = new THREE.Color('hsl('+ frq(c * 4) +', ' + s1 + '%, ' + s2 + '%)');
          }
        }
      }

      var cap = utils.midiMinMax(k3, 0, 8);
      function applyClone(clone, c) {
        if (!clone) return;

        if (cap < c) {
          clone.visible = false;
          return;
        }

        clone.visible = true;
        clone.traverse(alterMaterials(c));

        var s = fat.scale.toArray();
        clone.scale.set(...s);

        var r = fat.rotation.toArray();
        clone.rotation.set(...r);

        var p = fat.position.toArray();
        p[Math.round(utils.midiMinMax(s3, 0, 2))] = (c * vol(4) * 0.01 * (tilt * (c % 2 === 0 ? 1 : -1)));
        clone.position.set(...p);
      }

      function applyClones(count = 1) {
        for (var c = 1; c <= count; c++) {
          var cloneName = 'clone' + c;
          var clone = scene.getObjectByName(cloneName);
          applyClone(clone, c);
        }
      }
      applyClones(8);
    parameters:
      - name: knob1
        value: '63'
        default: ''
      - name: knob2
        value: '63'
        default: ''
      - name: knob3
        value: '63'
        default: ''
      - name: knob4
        value: '63'
        default: ''
      - name: slider1
        value: '63'
        default: ''
      - name: slider2
        value: '63'
        default: ''
      - name: slider3
        value: '63'
        default: ''
      - name: slider4
        value: '63'
        default: ''
    geometries: []
    lights:
      - visible: true
        type: ambient
        name: defaultambient
        intensity: 1
        position:
          x: 0
          'y': 0
          z: 0
        rotation:
          x: 0
          'y': 0
          z: 0
        scale:
          x: 0
          'y': 0
          z: 0
        color:
          r: 1
          g: 1
          b: 1
      - visible: true
        type: directonal
        name: defaultdirectonal
        intensity: 1
        position:
          x: 45
          'y': 45
          z: 45
        rotation:
          x: 0
          'y': 0
          z: 0
        scale:
          x: 0
          'y': 0
          z: 0
        color:
          r: 1
          g: 1
          b: 1
        lookAt:
          x: 0
          'y': 0
          z: 0
    cameras:
      - visible: true
        type: perspective
        name: defaultperspective
        focus: 10
        fov: 50
        aspect: 1
        near: 0.1
        far: 2000
        zoom: 1
        position:
          x: 35
          'y': 35
          z: 35
        rotation:
          x: 0
          'y': 0
          z: 0
        scale:
          x: 0
          'y': 0
          z: 0
        lookAt:
          x: 0
          'y': 0
          z: 0
      - visible: true
        type: orthographic
        name: defaultortho
        left: 80
        right: 80
        top: 60
        bottom: 60
        near: 0.1
        far: 2000
        position:
          x: 35
          'y': 35
          z: 35
        rotation:
          x: 0
          'y': 0
          z: 0
        scale:
          x: 0
          'y': 0
          z: 0
        lookAt:
          x: 0
          'y': 0
          z: 0
    materials: []
    loaders:
      - visible: true
        type: obj
        name: fat
        path: ./assets/zeropaper/
        src: zeropaper-concrete.obj
        position:
          x: 0
          'y': 0
          z: 0
        rotation:
          x: 0
          'y': 0
          z: 0
        scale:
          x: 0
          'y': 0
          z: 0
  zeropaperLogo:
    type: SVG
    layerStyles: 'mix-blend-mode: overlay;'
    svgStyles:
      '#zeropaper': >-
        fill: var(--fill-color); stroke: var(--stroke-color); stroke-width:
        var(--stroke-width);
    parameters:
      - name: src
        value: ./assets/zeropaper/zeropaper-fat.svg
        type: string
        default: ''
      - name: 'fill-color'
        value: white
        default: white
      - name: 'stroke-color'
        value: none
        default: none
      - name: 'stroke-width'
        value: 5px
        default: 5px
