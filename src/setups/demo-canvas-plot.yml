signals: {}
mappings: {}
layers:
  stat:
    type: canvas
    layerStyles: ''
    updateFunction: >-
      var cache = layer.cache;

      // if (cache.lastframe === frametime) return;



      cache.frame = cache.frame || 0;

      cache.lastbeat = cache.lastbeat || 0;

      cache.lastframe = cache.lastframe || 0;

      cache.dir = cache.dir || 1;

      if (beatnum !== cache.lastbeat) {
        cache.frame = 0;
        cache.lastbeat = beatnum;
        cache.dir = cache.dir * -1;
      }

      else {
        cache.frame++;
      }



      ctx.clearRect(0, 0, width, height);

      var samples = ctx.canvas.width;

      var tv = (frametime % 900000) / 1000;

      plotPush('fps', fps, samples);


      //console.info(avg);

      ctx.fillStyle = 'black';

      ctx.strokeStyle = 'white';

      ctx.textAlign = 'center';

      ctx.textBaseline = 'middle';

      ctx.font = '45px sans-serif';

      writeThings([
        fps + 'fps',
        latency + 'ms'
      ]);


      plotPush('algo1', Math.sin(tv) * Math.cos(tv) + Math.sin(tv) * 0.5,
      samples);

      plotPush('latency', ((latency * (1 / 20))) - 1 + 0.5, samples);

      plotPush('vol', ((1 / (255 * 0.5)) * vol(32)) - 1, samples);

      plotPush('beatprct', (2 * (beatprct / 100)) - 0.75, samples);

      plotPush('beatnum', cache.dir, samples);

      plotPush('frq', ((1 / (255 * 0.25)) * frq(32)) - 1, samples);

      plot([
        ['beatprct', 'grey'],
        ['beatnum', 'blue'],
        ['latency', 'red'],
        ['vol', 'lightblue'],
        ['algo1', 'lightgreen'],
        ['frq', 'green'],
        ['fps', 'lightgrey'],
      ], samples);


      cache.lastframe = frametime;
    parameters:
      - name: active
        type: boolean
        value: true
        default: true
      - name: clear
        type: number
        value: 1
        default: 1
      - name: zIndex
        type: number
        value: 0
        default: 0
